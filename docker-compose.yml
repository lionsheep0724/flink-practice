version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - stt_network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"       # 내부 및 컨테이너 간 통신용
      - "29092:29092"     # 외부(호스트) 접근용
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - stt_network

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "unless-stopped"
    depends_on:
      - kafka
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms32M -Xmx64M"
    networks:
      - stt_network

  producer:
    build:
      context: ./producer
    image: producer:0.0.0
    ports:
      - "25250:25250"  # 예: 프로듀서가 노출하는 포트
    environment:
      SPRING_PROFILES_ACTIVE: "prod"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    depends_on:
      - kafka
    networks:
      - stt_network

  consumer:
    build:
      context: ./consumer
    image: consumer:0.0.0
    ports:
      - "8082:8080"  # 컨테이너 내부 포트 8080을 호스트 8082에 매핑 (예시)
    environment:
      SPRING_PROFILES_ACTIVE: "prod"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      # 필요시 Flink 관련 환경 변수도 추가하세요.
    depends_on:
      - kafka
    networks:
      - stt_network

  vad-triton:
    image: vad-tritonserver:0.0.0
    restart: "unless-stopped"
    ports:
      - "8000:8000"   # HTTP endpoint
      - "8001:8001"   # gRPC endpoint
      - "8002:8002"   # Metrics endpoint
    volumes:
      - ./vad/model_repository:/models
    command: ["tritonserver", "--model-repository=/models"]
    networks:
      - stt_network

  stt-fastapi:
    image: stt-fastapi:0.0.0
    restart: "unless-stopped"
    ports:
      - "8080:8080"
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8080"]
    networks:
      - stt_network

networks:
  stt_network:
    driver: bridge
